- 요구사항
    이전 까지 파라미터, 디자인 패턴등을 사용해서 만들었던 코드들은 결과적으로 기존 코드를 변경해야 한다.
    그래서 기존 요구사항에 원래 코드를 수정하지 않고 로그 추적기를 적용해야 한다.

- 정리
    Client -> Server (직접 호출)
    Client -> Proxy -> Server (간접 호출)

    클라이언트가 요청한 결과를 서버에 직접 요청하는 것이 아니라 어떤 대리자를 통해서 간접적으로 서버에 요청할 수 있다.
    쉽게 말하면 결국 Proxy는 대리자가 되는 샘이지지

    직접 호출과 다르게 간접 호출은 대지라가 중간에 여러가지 일을할 수 있다.
        접근제어, 캐싱, 부가 기능 추가, 프록시 체인 (Client -> Proxy -> Proxy -> Server)

    객체가 프록시가 되려면, 클라이언트가 서버에 요청한 것인지 프록시에 요청한 것인지 조차 몰라야 한다.
    !!따라서 서버와 프록시는 같은 인터페이스를 사용해야 한다.
    그리고 클라이언트가 사용하는 서버 객체를 프록시 객체로 변경해도 클라이언트 코드를 변경하지 않고 동작할 수 있다.


    GOF 디자인 패턴
    둘다 프록시를 사용하는 방법이지만 GOF 디자인 패턴에서는 이 둘을 의도(intent)에 따라서 프록시
    패턴과 데코레이터 패턴으로 구분한다.
    프록시 패턴: 접근 제어가 목적
    데코레이터 패턴: 새로운 기능 추가가 목적

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    프록시랑 프록시 패턴은 정말 다른거임 같은거라고 생각하면 안됌